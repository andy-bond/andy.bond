<button id="theme-btn" title="Toggle Theme">
	<icon @icon-name="sun"></icon>
	<icon @icon-name="moon"></icon>
</button>

<style webc:scoped>
	.icon-sun {
		display: block;
	}

	.icon-moon {
		display: none;
	}

	:host-context(.theme-dark) .icon-moon {
		display: block;
	}

	:host-context(.theme-dark) .icon-sun {
		display: none;
	}
</style>

<script webc:bucket="critical">
	const STORAGE_PREFIX = 'andy.bond';
	const THEME_KEY = `${STORAGE_PREFIX}-theme`;
	const THEME_CLASS_DARK = 'theme-dark';
	const THEME_CLASS_LIGHT = 'theme-light';

	function toggleTheme() {
		document.documentElement.classList.toggle(THEME_CLASS_DARK);
		const nextTheme = document.documentElement.classList.contains(
			THEME_CLASS_DARK
		)
			? THEME_CLASS_DARK
			: THEME_CLASS_LIGHT;

		localStorage.setItem(THEME_KEY, nextTheme);
	}

	const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches;
	const initialThemeFromStorage = localStorage.getItem(THEME_KEY);
	const initialThemeIsDark = initialThemeFromStorage
		? initialThemeFromStorage === THEME_CLASS_DARK
		: systemTheme;
	const initialTheme = initialThemeIsDark
		? THEME_CLASS_DARK
		: THEME_CLASS_LIGHT;
	const isAlreadyDark =
		document.documentElement.classList.contains(THEME_CLASS_DARK);

	if (initialThemeIsDark && !isAlreadyDark) {
		toggleTheme();
	}
</script>

<script webc:bucket="defer">
	class ThemeToggle extends HTMLElement {
		constructor() {
			super();
		}

		connectedCallback() {
			this.querySelector(':scope > #theme-btn').addEventListener(
				'click',
				toggleTheme,
				false
			);
		}
	}

	customElements.define('theme-toggle', ThemeToggle);
</script>
