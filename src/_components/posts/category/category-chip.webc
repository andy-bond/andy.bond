<script webc:type="js">
	let result = '';
	const postsPath = '/posts/';

	if (this.categoryName === 'All Posts') {
		const current = this.$data.page.url;
		const aria = current === postsPath ? ' aria-current="page"' : '';

		result = `<a href="${postsPath}"${aria}>${this.categoryName}</a>`;
	} else {
		if (!this.categoryName) {
			throw new Error('Error - <category> - @name is required');
		}

		const category = this.$data.categories[this.categoryName];

		if (!category) {
			throw new Error('Error - <category> - category not found');
		}

		const inner = `<icon @icon-name="${category.icon}"></icon><div>${category.name}</div>`;

		if (this.link === 'true') {
			const current = this.$data.page.url;
			const path = `${postsPath}${this.categoryName}/`;
			const aria = current === path ? ' aria-current="page"' : '';

			result = `<a href="${path}"${aria}>${inner}</a>`;
		} else {
			result = inner;
		}
	}

	result;
</script>

<style webc:scoped>
	:host:has(a) {
		display: flex;
		flex-direction: row;
		align-items: center;
		align-self: flex-start;
	}

	:host:not(:has(a)),
	:host:has(a) a {
		display: flex;
		flex-direction: row;
		align-items: center;
		align-self: flex-start;
		gap: var(--default-spacing-half);
		padding: var(--default-spacing-qtr) var(--default-spacing-half);
		border-radius: var(--default-border-radius);
		border: 1px solid var(--theme-color-title);
		transition: background-color var(--default-transition),
			color var(--default-transition), border-color var(--default-transition);
	}

	:host:has(a) a {
		text-decoration: none;

		&:is(:hover, :focus-visible) {
			box-shadow: var(--default-shadow-small);
		}

		&[aria-current='page'] {
			background-color: var(--theme-color-title);
			color: var(--theme-color-text-inverse);
		}
	}
</style>
